/*
compile(file("append.pl"),string("append([1,2],[3],X).")).
*/

compile(RawProgram,RawGoal) :-
    convert_program(RawProgram,Pdict,Program),
    convert_input(RawGoal,f(Name,Arity),Goal,InputDict),
    get_index_dict(f(Name,Arity),InitClause,Pdict,_),
    length(InputDict,I1),
    open('PrologGenerated.cpp',write,St),
    write(St,'//////////////////////////////////////////////////////////////////////////////////////\n'),
    write(St,'// DO NOT EDIT THIS FILE. It is programmatically generated and will be overwritten. //\n'),
    write(St,'//////////////////////////////////////////////////////////////////////////////////////\n\n'),
    write(St,'#include "Prolog.h"\n\n'),
    maplist(write_function_template(St),Pdict),nl(St),
    maplist(write_frame_reference_template(St),Pdict,Program),nl(St),
    write(St,'void Prolog::__do_start() {\n'),
    write(St,'\tbase_sp=(uint8_t*)__builtin_frame_address(0);\n'),
    foldl(setup_args(St),Goal,0,Nargs),
    %write(St,'std::cout << pldisplay(goal_args0,0) << std::endl;'),
    %write(St,'std::cout << pldisplay(goal_args1,0) << std::endl;'),
    %write(St,'std::cout << pldisplay(goal_args2,0) << std::endl;'),
   write(St,'\tif('),write(St,Name),write(St,'_'),write(St,Arity),write(St,'(*this'),
    write_arg(St,', goal_args',0,Arity),
    write(St,', '),write(St,I1),write(St,')) {\n'),
    write(St,'\t}\n'),
    write(St,'}\n'),
    maplist(compile_function(St),Pdict,Program),
    close(St).

setup_args(St,Arg,N,N1) :-
    N1 is N+1,
    write(St,'\tuint32_t goal_args'),write(St,N),write(St,'='),
    write_build(St,'',Arg),
    write(St,';\n').

write_build(St,Prefix,eol) :- write(St,Prefix),write(St,'plcreate_eol()').
write_build(St,Prefix,i(I)) :- write(St,Prefix),write(St,'plcreate_int('),write(St,I),write(St,')').
write_build(St,Prefix,v(N)) :- write(St,Prefix),write(St,'plcreate_var('),write(St,N),write(St,')').
write_build(St,Prefix,list(H,T)) :-
    write(St,Prefix),write(St,'plcreate_list('),
    write_build(St,Prefix,H),
    write(St,','),
    write_build(St,Prefix,T),
    write(St,')').

write_arg(_,_,N,N).
write_arg(St,String,N,M) :-
    N=\=M,
    write(St,String),
    write(St,N),
    N1 is N+1,
    write_arg(St,String,N1,M).
    
write_function_template(St,f(Name,Arity)) :-
    write(St,"bool "),write(St,Name),write(St,'_'),write(St,Arity),write(St,'(Prolog& p'),
    write_arg(St,', uint32_t arg',0,Arity),
    write(St,', uint32_t voffset);\n').

write_frame_reference_template(St,f(Name,Arity),Predicate) :-
    length(Predicate,LP),
    (LP>1 -> write(St,'static FrameReferenceInfo '),write(St,Name),write(St,'_'),write(St,Arity),write(St,'_fri('),write(St,LP),write(St,');\n') ; true).
     
compile_function(St,f(Name,Arity),Predicate) :-
    length(Predicate,LP),
    nl(St),write(St,"bool "),write(St,Name),write(St,'_'),write(St,Arity),write(St,'(Prolog& p'),
    write_arg(St,', uint32_t arg',0,Arity),
    write(St,', uint32_t voffset) {\n'),
    (LP>1 -> write(St,'\tFrameStore* fs=p.process_stack_state(&'),write(St,Name),write(St,'_'),write(St,Arity),write(St,'_fri);\n') ; true),
     write(St,'\tp.unwind_stack_mark();\n'),
     (LP>1 -> write(St,'\tswitch(fs->clause_index) {\n') ; true),
    foldl(compile_clause(St,LP),Predicate,0,_),
    (LP>1 -> write(St,'\t}\n') ; true),
    (LP>1 -> write(St,'\tp.pop_frame_stack();\n') ; true),
    write(St,'\treturn false;\n'),
    write(St,'}\n').

compile_clause(St,LP,clause(_,Args,Body),NClause,NClause1) :-
    NClause1 is NClause+1,
    (LP>1 -> write(St,'\t\tcase '),write(St,NClause),write(St,': {\n') ; true),
    write(St,'\t\t\tif('),
    foldl(compile_clause_args(St),Args,0,_),
    write(St,') {\n'),
    maplist(compile_clause_body(St),Body),
    write(St,'\t\t\t\treturn true;\n'),
    write(St,'\t\t\t} else {\n'),
    write(St,'\t\t\t\tp.unwind_stack_revert_to_mark();\n'),
    (NClause1=\=LP -> write(St,'\t\t\t\tfs->clause_index++;\n') ; true),
    write(St,'\t\t\t}\n'),
    (LP>1 -> write(St,'\t\t}\n') ; true).

compile_clause_args(St,eol,N,N1) :- N1 is N+1,
    (N==0 -> true ; write(St,' && ')),
    write(St,'p.match_eol(arg'),write(St,N),write(St,')').
compile_clause_args(St,i(I),N,N1) :- N1 is N+1,
    (N==0 -> true ; write(St,' && ')),
    write(St,'p.match_int('),write(St,I),write(St,arg),write(St,N),write(St,')').
compile_clause_args(St,v(V),N,N1) :- N1 is N+1,
    (N==0 -> true ; write(St,' && ')),
    write(St,'p.match_var('),write(St,V),write(St,','),write(St,arg),write(St,N),write(St,',voffset)').
compile_clause_args(St,list(H,T),N,N1) :- N1 is N+1,
    (N==0 -> true ; write(St,' && ')),
    write(St,'p.unify('),write_build(St,'p.',list(H,T)),write(St,',arg'),write(St,N),write(St,',voffset)').

compile_clause_body(St,fcall) :- 
