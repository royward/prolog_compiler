/*
compile(file("append.pl"),string("append([1,2],[3],X).")).
*/

compile(RawProgram,RawGoal) :-
    convert_program(RawProgram,Pdict,Program),
    convert_input(RawGoal,Name,Goal,InputDict),
    get_index_dict(Name,InitClause,Pdict,_),
    length(InputDict,I1),
    open('PrologGenerated.cpp',write,St),
    write(St,'// DO NOT EDIT THIS FILE. It is programmatically generated and will be overwritten.'),nl(St),nl(St),
    write(St,'#include "Prolog.h"'),nl(St),nl(St),
    write(St,'void Prolog::__do_start() {'),nl(St),
    foldl(setup_args(St),Goal,0,Nargs),
    write(St,'std::cout << pldisplay(goal_args0,0) << std::endl;'),
    write(St,'std::cout << pldisplay(goal_args1,0) << std::endl;'),
    write(St,'std::cout << pldisplay(goal_args2,0) << std::endl;'),
    write(St,'}'),nl(St),
    close(St).

setup_args(St,Arg,N,N1) :-
    N1 is N+1,
    write(St,'    uint32_t goal_args'),write(St,N),write(St,'='),
    write_arg(St,Arg),
    write(St,';'),nl(St).

write_arg(St,eol) :- write(St,'plcreate_eol()').
write_arg(St,i(I)) :- write(St,'plcreate_int('),write(St,I),write(St,')').
write_arg(St,v(N)) :- write(St,'plcreate_var('),write(St,N),write(St,')').
write_arg(St,list(H,T)) :-
    write(St,'plcreate_list('),
    write_arg(St,H),
    write(St,','),
    write_arg(St,T),
    write(St,')').
