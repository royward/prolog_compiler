% prolog([
% fact(compound(atom(range),[variable('M'),variable('M'),list([variable('M')],eol)])),
% rule(compound(atom(range),[variable('M'),variable('N'),list([variable('M')],variable('Ns'))]),
%     [infix(=\=,xfx,variable('M'),variable('N')),infix(is,xfx,variable('M1'),infix(+,yfx,variable('M'),integer(1))),compound(atom(range),[variable('M1'),variable('N'),variable('Ns')])]),
% 
% fact(compound(atom(selectx),[variable('X'),list([variable('X')],variable('Xs')),variable('Xs')])),
% rule(compound(atom(selectx),[variable('X'),list([variable('Y')],variable('Ys')),list([variable('Y')],variable('Zs'))]),
%     [compound(atom(selectx),[variable('X'),variable('Ys'),variable('Zs')])]),
%     
% rule(compound(atom(queens),[variable('N'),variable('Qs')]),
%     [compound(atom(range),[integer(1),variable('N'),variable('Ns')]),compound(atom(queens_aux),[variable('Ns'),list([],eol),variable('Qs')])]),
%     
% rule(compound(atom(queens_aux),[variable('UnplacedQs'),variable('SafeQs'),variable('Qs')]),
%     [compound(atom(selectx),[variable('Q'),variable('UnplacedQs'),variable('UnplacedQs1')]),
%         compound(atom(not_attack),[variable('Q'),integer(1),variable('SafeQs')]),
%         compound(atom(queens_aux),[variable('UnplacedQs1'),list([variable('Q')],variable('SafeQs')),variable('Qs')])]),
% fact(compound(atom(queens_aux),[list([],eol),variable('Qs'),variable('Qs')])),
% 
% fact(compound(atom(not_attack),[anonymous,anonymous,list([],eol)])),
% rule(compound(atom(not_attack),[variable('Q0'),variable('D0'),list([variable('Q')],variable('Qs'))]),
%     [infix(=\=,xfx,variable('Q0'),variable('Q')),
%         infix(=\=,xfx,infix(-,yfx,variable('Q0'),variable('Q')),variable('D0')),
%         infix(=\=,xfx,infix(-,yfx,variable('Q'),variable('Q0')),variable('D0')),
%         infix(is,xfx,variable('D1'),infix(+,yfx,variable('D0'),integer(1))),
%         compound(atom(not_attack),[variable('Q0'),variable('D1'),variable('Qs')])])])

% [f(range,3),f(selectx,3),f(queens,2),f(queens_aux,3),f(not_attack,3)]
% [[  clause(['M'],
%         [v(0),v(0),list(v(0),eol)],
%             []),
%     clause(['M','N','Ns','M1'],
%         [v(0),v(1),list(v(0),v(2))],
%             [function(test_neq,v(0),v(1)),
%             function(assign,v(3),function(add,v(0),i(1))),
%             fcall(0,[v(3),v(1),v(2)])])],
% [   clause(['X','Xs'],
%         [v(0),list(v(0),v(1)),v(1)],
%             []),
%     clause(['X','Y','Ys','Zs'],
%         [v(0),list(v(1),v(2)),list(v(1),v(3))],
%             [fcall(1,[v(0),v(2),v(3)])])],
% [   clause(['N','Qs','Ns'],
%         [v(0),v(1)],
%             [fcall(0,[i(1),v(0),v(2)]),
%             fcall(3,[v(2),eol,v(1)])])],
% [   clause(['UnplacedQs','SafeQs','Qs','Q','UnplacedQs1'],
%         [v(0),v(1),v(2)],
%             [fcall(1,[v(3),v(0),v(4)]),
%             fcall(4,[v(3),i(1),v(1)]),
%             fcall(3,[v(4),list(v(3),v(1)),v(2)])]),
%     clause(['Qs'],
%         [eol,v(0),v(0)],
%             [])],
% [   [clause(['_A1','_A2'],
%         [v(0),v(1),eol],
%             []),
%     clause(['Q0','D0','Q','Qs','D1'],
%         [v(0),v(1),list(v(2),v(3))],
%             [function(test_neq,v(0),v(2)),
%             function(test_neq,v(0),function(add,v(1),v(2))),
%             function(test_neq,v(2),function(add,v(1),v(0))),
%             function(assign,v(4),function(add,v(1),i(1))),
%             fcall(4,[v(0),v(4),v(3)])])]]
